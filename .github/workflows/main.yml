# name: Super-Linter

# # Run this workflow every time a new commit pushed to your repository
# on: push

# jobs:
#   # Set the job key. The key is displayed as the job name
#   # when a job name is not provided
#   super-lint:
#     # Name the Job
#     name: Lint code base
#     # Set the type of machine to run on
#     runs-on: ubuntu-latest

#     steps:
#       # Checks out a copy of your repository on the ubuntu-latest machine
#       - name: Checkout code
#         uses: actions/checkout@v2

#       # Runs the Super-Linter action
#       - name: Run Super-Linter
#         uses: github/super-linter@v3
#         env:
#           DEFAULT_BRANCH: master
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: PR validation

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
# version: 2.1

# jobs:
#   run_tests:
#     docker:
#       - image: circleci/node:10.18.1
#         environment:
#           TERM: xterm
#           GIT_AUTHOR_NAME: CircleCI
#           GIT_COMMITTER_NAME: CircleCI
#     steps:
#       - add_ssh_keys:
#           fingerprints:
#             - 'ef:b4:5c:0b:93:19:ea:c8:27:92:aa:fa:b9:4e:2a:b3'
#       - checkout
#       - run:
#           name: Install dependencies
#           command: npm install
#       - run:
#           name: Authenticate with registry token
#           command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/project/.npmrc
#       - run:
#           name: Publish prerelease version
#           command: TESTED_VERSION=$(npm version prerelease --preid=ci)
#       - run:
#           name: Prevent CI running after adding a test version
#           command: git commit --amend -m "$TESTED_VERSION [ci skip]"
#       - run:
#           name: Push and publish to test tag
#           command: git push && npm publish --tag test
#       - run:
#           name: Install published prereleased test version
#           command: cd test && npm install jmarceli-npm-tests@${TESTED_VERSION}
#       # - run:
#       #     name: Run tests
#       #     command: cd test && npm test

# workflows:
#   tests:
#     jobs:
#       - run_tests
